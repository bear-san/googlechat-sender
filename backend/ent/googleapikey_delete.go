// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/bear-san/googlechat-sender/backend/ent/googleapikey"
	"github.com/bear-san/googlechat-sender/backend/ent/predicate"
)

// GoogleApiKeyDelete is the builder for deleting a GoogleApiKey entity.
type GoogleApiKeyDelete struct {
	config
	hooks    []Hook
	mutation *GoogleApiKeyMutation
}

// Where appends a list predicates to the GoogleApiKeyDelete builder.
func (gakd *GoogleApiKeyDelete) Where(ps ...predicate.GoogleApiKey) *GoogleApiKeyDelete {
	gakd.mutation.Where(ps...)
	return gakd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (gakd *GoogleApiKeyDelete) Exec(ctx context.Context) (int, error) {
	return withHooks[int, GoogleApiKeyMutation](ctx, gakd.sqlExec, gakd.mutation, gakd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (gakd *GoogleApiKeyDelete) ExecX(ctx context.Context) int {
	n, err := gakd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (gakd *GoogleApiKeyDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(googleapikey.Table, sqlgraph.NewFieldSpec(googleapikey.FieldID, field.TypeString))
	if ps := gakd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, gakd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	gakd.mutation.done = true
	return affected, err
}

// GoogleApiKeyDeleteOne is the builder for deleting a single GoogleApiKey entity.
type GoogleApiKeyDeleteOne struct {
	gakd *GoogleApiKeyDelete
}

// Where appends a list predicates to the GoogleApiKeyDelete builder.
func (gakdo *GoogleApiKeyDeleteOne) Where(ps ...predicate.GoogleApiKey) *GoogleApiKeyDeleteOne {
	gakdo.gakd.mutation.Where(ps...)
	return gakdo
}

// Exec executes the deletion query.
func (gakdo *GoogleApiKeyDeleteOne) Exec(ctx context.Context) error {
	n, err := gakdo.gakd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{googleapikey.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (gakdo *GoogleApiKeyDeleteOne) ExecX(ctx context.Context) {
	if err := gakdo.Exec(ctx); err != nil {
		panic(err)
	}
}

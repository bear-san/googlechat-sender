// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/bear-san/googlechat-sender/backend/ent/googleapikey"
)

// GoogleApiKey is the model entity for the GoogleApiKey schema.
type GoogleApiKey struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// AccessToken holds the value of the "access_token" field.
	AccessToken string `json:"access_token,omitempty"`
	// RefreshToken holds the value of the "refresh_token" field.
	RefreshToken string `json:"refresh_token,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*GoogleApiKey) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case googleapikey.FieldID, googleapikey.FieldAccessToken, googleapikey.FieldRefreshToken:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the GoogleApiKey fields.
func (gak *GoogleApiKey) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case googleapikey.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				gak.ID = value.String
			}
		case googleapikey.FieldAccessToken:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field access_token", values[i])
			} else if value.Valid {
				gak.AccessToken = value.String
			}
		case googleapikey.FieldRefreshToken:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field refresh_token", values[i])
			} else if value.Valid {
				gak.RefreshToken = value.String
			}
		default:
			gak.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the GoogleApiKey.
// This includes values selected through modifiers, order, etc.
func (gak *GoogleApiKey) Value(name string) (ent.Value, error) {
	return gak.selectValues.Get(name)
}

// Update returns a builder for updating this GoogleApiKey.
// Note that you need to call GoogleApiKey.Unwrap() before calling this method if this GoogleApiKey
// was returned from a transaction, and the transaction was committed or rolled back.
func (gak *GoogleApiKey) Update() *GoogleApiKeyUpdateOne {
	return NewGoogleApiKeyClient(gak.config).UpdateOne(gak)
}

// Unwrap unwraps the GoogleApiKey entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (gak *GoogleApiKey) Unwrap() *GoogleApiKey {
	_tx, ok := gak.config.driver.(*txDriver)
	if !ok {
		panic("ent: GoogleApiKey is not a transactional entity")
	}
	gak.config.driver = _tx.drv
	return gak
}

// String implements the fmt.Stringer.
func (gak *GoogleApiKey) String() string {
	var builder strings.Builder
	builder.WriteString("GoogleApiKey(")
	builder.WriteString(fmt.Sprintf("id=%v, ", gak.ID))
	builder.WriteString("access_token=")
	builder.WriteString(gak.AccessToken)
	builder.WriteString(", ")
	builder.WriteString("refresh_token=")
	builder.WriteString(gak.RefreshToken)
	builder.WriteByte(')')
	return builder.String()
}

// GoogleApiKeys is a parsable slice of GoogleApiKey.
type GoogleApiKeys []*GoogleApiKey

// Code generated by ent, DO NOT EDIT.

package postschedule

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/bear-san/googlechat-sender/backend/ent/predicate"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.PostSchedule {
	return predicate.PostSchedule(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.PostSchedule {
	return predicate.PostSchedule(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.PostSchedule {
	return predicate.PostSchedule(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.PostSchedule {
	return predicate.PostSchedule(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.PostSchedule {
	return predicate.PostSchedule(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.PostSchedule {
	return predicate.PostSchedule(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.PostSchedule {
	return predicate.PostSchedule(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.PostSchedule {
	return predicate.PostSchedule(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.PostSchedule {
	return predicate.PostSchedule(sql.FieldLTE(FieldID, id))
}

// UID applies equality check predicate on the "uid" field. It's identical to UIDEQ.
func UID(v string) predicate.PostSchedule {
	return predicate.PostSchedule(sql.FieldEQ(FieldUID, v))
}

// Target applies equality check predicate on the "target" field. It's identical to TargetEQ.
func Target(v string) predicate.PostSchedule {
	return predicate.PostSchedule(sql.FieldEQ(FieldTarget, v))
}

// DisplayName applies equality check predicate on the "displayName" field. It's identical to DisplayNameEQ.
func DisplayName(v string) predicate.PostSchedule {
	return predicate.PostSchedule(sql.FieldEQ(FieldDisplayName, v))
}

// Text applies equality check predicate on the "text" field. It's identical to TextEQ.
func Text(v string) predicate.PostSchedule {
	return predicate.PostSchedule(sql.FieldEQ(FieldText, v))
}

// IsSent applies equality check predicate on the "is_sent" field. It's identical to IsSentEQ.
func IsSent(v bool) predicate.PostSchedule {
	return predicate.PostSchedule(sql.FieldEQ(FieldIsSent, v))
}

// SendAt applies equality check predicate on the "send_at" field. It's identical to SendAtEQ.
func SendAt(v time.Time) predicate.PostSchedule {
	return predicate.PostSchedule(sql.FieldEQ(FieldSendAt, v))
}

// UIDEQ applies the EQ predicate on the "uid" field.
func UIDEQ(v string) predicate.PostSchedule {
	return predicate.PostSchedule(sql.FieldEQ(FieldUID, v))
}

// UIDNEQ applies the NEQ predicate on the "uid" field.
func UIDNEQ(v string) predicate.PostSchedule {
	return predicate.PostSchedule(sql.FieldNEQ(FieldUID, v))
}

// UIDIn applies the In predicate on the "uid" field.
func UIDIn(vs ...string) predicate.PostSchedule {
	return predicate.PostSchedule(sql.FieldIn(FieldUID, vs...))
}

// UIDNotIn applies the NotIn predicate on the "uid" field.
func UIDNotIn(vs ...string) predicate.PostSchedule {
	return predicate.PostSchedule(sql.FieldNotIn(FieldUID, vs...))
}

// UIDGT applies the GT predicate on the "uid" field.
func UIDGT(v string) predicate.PostSchedule {
	return predicate.PostSchedule(sql.FieldGT(FieldUID, v))
}

// UIDGTE applies the GTE predicate on the "uid" field.
func UIDGTE(v string) predicate.PostSchedule {
	return predicate.PostSchedule(sql.FieldGTE(FieldUID, v))
}

// UIDLT applies the LT predicate on the "uid" field.
func UIDLT(v string) predicate.PostSchedule {
	return predicate.PostSchedule(sql.FieldLT(FieldUID, v))
}

// UIDLTE applies the LTE predicate on the "uid" field.
func UIDLTE(v string) predicate.PostSchedule {
	return predicate.PostSchedule(sql.FieldLTE(FieldUID, v))
}

// UIDContains applies the Contains predicate on the "uid" field.
func UIDContains(v string) predicate.PostSchedule {
	return predicate.PostSchedule(sql.FieldContains(FieldUID, v))
}

// UIDHasPrefix applies the HasPrefix predicate on the "uid" field.
func UIDHasPrefix(v string) predicate.PostSchedule {
	return predicate.PostSchedule(sql.FieldHasPrefix(FieldUID, v))
}

// UIDHasSuffix applies the HasSuffix predicate on the "uid" field.
func UIDHasSuffix(v string) predicate.PostSchedule {
	return predicate.PostSchedule(sql.FieldHasSuffix(FieldUID, v))
}

// UIDEqualFold applies the EqualFold predicate on the "uid" field.
func UIDEqualFold(v string) predicate.PostSchedule {
	return predicate.PostSchedule(sql.FieldEqualFold(FieldUID, v))
}

// UIDContainsFold applies the ContainsFold predicate on the "uid" field.
func UIDContainsFold(v string) predicate.PostSchedule {
	return predicate.PostSchedule(sql.FieldContainsFold(FieldUID, v))
}

// TargetEQ applies the EQ predicate on the "target" field.
func TargetEQ(v string) predicate.PostSchedule {
	return predicate.PostSchedule(sql.FieldEQ(FieldTarget, v))
}

// TargetNEQ applies the NEQ predicate on the "target" field.
func TargetNEQ(v string) predicate.PostSchedule {
	return predicate.PostSchedule(sql.FieldNEQ(FieldTarget, v))
}

// TargetIn applies the In predicate on the "target" field.
func TargetIn(vs ...string) predicate.PostSchedule {
	return predicate.PostSchedule(sql.FieldIn(FieldTarget, vs...))
}

// TargetNotIn applies the NotIn predicate on the "target" field.
func TargetNotIn(vs ...string) predicate.PostSchedule {
	return predicate.PostSchedule(sql.FieldNotIn(FieldTarget, vs...))
}

// TargetGT applies the GT predicate on the "target" field.
func TargetGT(v string) predicate.PostSchedule {
	return predicate.PostSchedule(sql.FieldGT(FieldTarget, v))
}

// TargetGTE applies the GTE predicate on the "target" field.
func TargetGTE(v string) predicate.PostSchedule {
	return predicate.PostSchedule(sql.FieldGTE(FieldTarget, v))
}

// TargetLT applies the LT predicate on the "target" field.
func TargetLT(v string) predicate.PostSchedule {
	return predicate.PostSchedule(sql.FieldLT(FieldTarget, v))
}

// TargetLTE applies the LTE predicate on the "target" field.
func TargetLTE(v string) predicate.PostSchedule {
	return predicate.PostSchedule(sql.FieldLTE(FieldTarget, v))
}

// TargetContains applies the Contains predicate on the "target" field.
func TargetContains(v string) predicate.PostSchedule {
	return predicate.PostSchedule(sql.FieldContains(FieldTarget, v))
}

// TargetHasPrefix applies the HasPrefix predicate on the "target" field.
func TargetHasPrefix(v string) predicate.PostSchedule {
	return predicate.PostSchedule(sql.FieldHasPrefix(FieldTarget, v))
}

// TargetHasSuffix applies the HasSuffix predicate on the "target" field.
func TargetHasSuffix(v string) predicate.PostSchedule {
	return predicate.PostSchedule(sql.FieldHasSuffix(FieldTarget, v))
}

// TargetEqualFold applies the EqualFold predicate on the "target" field.
func TargetEqualFold(v string) predicate.PostSchedule {
	return predicate.PostSchedule(sql.FieldEqualFold(FieldTarget, v))
}

// TargetContainsFold applies the ContainsFold predicate on the "target" field.
func TargetContainsFold(v string) predicate.PostSchedule {
	return predicate.PostSchedule(sql.FieldContainsFold(FieldTarget, v))
}

// DisplayNameEQ applies the EQ predicate on the "displayName" field.
func DisplayNameEQ(v string) predicate.PostSchedule {
	return predicate.PostSchedule(sql.FieldEQ(FieldDisplayName, v))
}

// DisplayNameNEQ applies the NEQ predicate on the "displayName" field.
func DisplayNameNEQ(v string) predicate.PostSchedule {
	return predicate.PostSchedule(sql.FieldNEQ(FieldDisplayName, v))
}

// DisplayNameIn applies the In predicate on the "displayName" field.
func DisplayNameIn(vs ...string) predicate.PostSchedule {
	return predicate.PostSchedule(sql.FieldIn(FieldDisplayName, vs...))
}

// DisplayNameNotIn applies the NotIn predicate on the "displayName" field.
func DisplayNameNotIn(vs ...string) predicate.PostSchedule {
	return predicate.PostSchedule(sql.FieldNotIn(FieldDisplayName, vs...))
}

// DisplayNameGT applies the GT predicate on the "displayName" field.
func DisplayNameGT(v string) predicate.PostSchedule {
	return predicate.PostSchedule(sql.FieldGT(FieldDisplayName, v))
}

// DisplayNameGTE applies the GTE predicate on the "displayName" field.
func DisplayNameGTE(v string) predicate.PostSchedule {
	return predicate.PostSchedule(sql.FieldGTE(FieldDisplayName, v))
}

// DisplayNameLT applies the LT predicate on the "displayName" field.
func DisplayNameLT(v string) predicate.PostSchedule {
	return predicate.PostSchedule(sql.FieldLT(FieldDisplayName, v))
}

// DisplayNameLTE applies the LTE predicate on the "displayName" field.
func DisplayNameLTE(v string) predicate.PostSchedule {
	return predicate.PostSchedule(sql.FieldLTE(FieldDisplayName, v))
}

// DisplayNameContains applies the Contains predicate on the "displayName" field.
func DisplayNameContains(v string) predicate.PostSchedule {
	return predicate.PostSchedule(sql.FieldContains(FieldDisplayName, v))
}

// DisplayNameHasPrefix applies the HasPrefix predicate on the "displayName" field.
func DisplayNameHasPrefix(v string) predicate.PostSchedule {
	return predicate.PostSchedule(sql.FieldHasPrefix(FieldDisplayName, v))
}

// DisplayNameHasSuffix applies the HasSuffix predicate on the "displayName" field.
func DisplayNameHasSuffix(v string) predicate.PostSchedule {
	return predicate.PostSchedule(sql.FieldHasSuffix(FieldDisplayName, v))
}

// DisplayNameEqualFold applies the EqualFold predicate on the "displayName" field.
func DisplayNameEqualFold(v string) predicate.PostSchedule {
	return predicate.PostSchedule(sql.FieldEqualFold(FieldDisplayName, v))
}

// DisplayNameContainsFold applies the ContainsFold predicate on the "displayName" field.
func DisplayNameContainsFold(v string) predicate.PostSchedule {
	return predicate.PostSchedule(sql.FieldContainsFold(FieldDisplayName, v))
}

// TextEQ applies the EQ predicate on the "text" field.
func TextEQ(v string) predicate.PostSchedule {
	return predicate.PostSchedule(sql.FieldEQ(FieldText, v))
}

// TextNEQ applies the NEQ predicate on the "text" field.
func TextNEQ(v string) predicate.PostSchedule {
	return predicate.PostSchedule(sql.FieldNEQ(FieldText, v))
}

// TextIn applies the In predicate on the "text" field.
func TextIn(vs ...string) predicate.PostSchedule {
	return predicate.PostSchedule(sql.FieldIn(FieldText, vs...))
}

// TextNotIn applies the NotIn predicate on the "text" field.
func TextNotIn(vs ...string) predicate.PostSchedule {
	return predicate.PostSchedule(sql.FieldNotIn(FieldText, vs...))
}

// TextGT applies the GT predicate on the "text" field.
func TextGT(v string) predicate.PostSchedule {
	return predicate.PostSchedule(sql.FieldGT(FieldText, v))
}

// TextGTE applies the GTE predicate on the "text" field.
func TextGTE(v string) predicate.PostSchedule {
	return predicate.PostSchedule(sql.FieldGTE(FieldText, v))
}

// TextLT applies the LT predicate on the "text" field.
func TextLT(v string) predicate.PostSchedule {
	return predicate.PostSchedule(sql.FieldLT(FieldText, v))
}

// TextLTE applies the LTE predicate on the "text" field.
func TextLTE(v string) predicate.PostSchedule {
	return predicate.PostSchedule(sql.FieldLTE(FieldText, v))
}

// TextContains applies the Contains predicate on the "text" field.
func TextContains(v string) predicate.PostSchedule {
	return predicate.PostSchedule(sql.FieldContains(FieldText, v))
}

// TextHasPrefix applies the HasPrefix predicate on the "text" field.
func TextHasPrefix(v string) predicate.PostSchedule {
	return predicate.PostSchedule(sql.FieldHasPrefix(FieldText, v))
}

// TextHasSuffix applies the HasSuffix predicate on the "text" field.
func TextHasSuffix(v string) predicate.PostSchedule {
	return predicate.PostSchedule(sql.FieldHasSuffix(FieldText, v))
}

// TextEqualFold applies the EqualFold predicate on the "text" field.
func TextEqualFold(v string) predicate.PostSchedule {
	return predicate.PostSchedule(sql.FieldEqualFold(FieldText, v))
}

// TextContainsFold applies the ContainsFold predicate on the "text" field.
func TextContainsFold(v string) predicate.PostSchedule {
	return predicate.PostSchedule(sql.FieldContainsFold(FieldText, v))
}

// IsSentEQ applies the EQ predicate on the "is_sent" field.
func IsSentEQ(v bool) predicate.PostSchedule {
	return predicate.PostSchedule(sql.FieldEQ(FieldIsSent, v))
}

// IsSentNEQ applies the NEQ predicate on the "is_sent" field.
func IsSentNEQ(v bool) predicate.PostSchedule {
	return predicate.PostSchedule(sql.FieldNEQ(FieldIsSent, v))
}

// SendAtEQ applies the EQ predicate on the "send_at" field.
func SendAtEQ(v time.Time) predicate.PostSchedule {
	return predicate.PostSchedule(sql.FieldEQ(FieldSendAt, v))
}

// SendAtNEQ applies the NEQ predicate on the "send_at" field.
func SendAtNEQ(v time.Time) predicate.PostSchedule {
	return predicate.PostSchedule(sql.FieldNEQ(FieldSendAt, v))
}

// SendAtIn applies the In predicate on the "send_at" field.
func SendAtIn(vs ...time.Time) predicate.PostSchedule {
	return predicate.PostSchedule(sql.FieldIn(FieldSendAt, vs...))
}

// SendAtNotIn applies the NotIn predicate on the "send_at" field.
func SendAtNotIn(vs ...time.Time) predicate.PostSchedule {
	return predicate.PostSchedule(sql.FieldNotIn(FieldSendAt, vs...))
}

// SendAtGT applies the GT predicate on the "send_at" field.
func SendAtGT(v time.Time) predicate.PostSchedule {
	return predicate.PostSchedule(sql.FieldGT(FieldSendAt, v))
}

// SendAtGTE applies the GTE predicate on the "send_at" field.
func SendAtGTE(v time.Time) predicate.PostSchedule {
	return predicate.PostSchedule(sql.FieldGTE(FieldSendAt, v))
}

// SendAtLT applies the LT predicate on the "send_at" field.
func SendAtLT(v time.Time) predicate.PostSchedule {
	return predicate.PostSchedule(sql.FieldLT(FieldSendAt, v))
}

// SendAtLTE applies the LTE predicate on the "send_at" field.
func SendAtLTE(v time.Time) predicate.PostSchedule {
	return predicate.PostSchedule(sql.FieldLTE(FieldSendAt, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.PostSchedule) predicate.PostSchedule {
	return predicate.PostSchedule(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.PostSchedule) predicate.PostSchedule {
	return predicate.PostSchedule(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.PostSchedule) predicate.PostSchedule {
	return predicate.PostSchedule(func(s *sql.Selector) {
		p(s.Not())
	})
}

// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/bear-san/googlechat-sender/backend/ent/googleapikey"
	"github.com/bear-san/googlechat-sender/backend/ent/predicate"
)

// GoogleApiKeyUpdate is the builder for updating GoogleApiKey entities.
type GoogleApiKeyUpdate struct {
	config
	hooks    []Hook
	mutation *GoogleApiKeyMutation
}

// Where appends a list predicates to the GoogleApiKeyUpdate builder.
func (gaku *GoogleApiKeyUpdate) Where(ps ...predicate.GoogleApiKey) *GoogleApiKeyUpdate {
	gaku.mutation.Where(ps...)
	return gaku
}

// SetAccessToken sets the "access_token" field.
func (gaku *GoogleApiKeyUpdate) SetAccessToken(s string) *GoogleApiKeyUpdate {
	gaku.mutation.SetAccessToken(s)
	return gaku
}

// SetRefreshToken sets the "refresh_token" field.
func (gaku *GoogleApiKeyUpdate) SetRefreshToken(s string) *GoogleApiKeyUpdate {
	gaku.mutation.SetRefreshToken(s)
	return gaku
}

// Mutation returns the GoogleApiKeyMutation object of the builder.
func (gaku *GoogleApiKeyUpdate) Mutation() *GoogleApiKeyMutation {
	return gaku.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (gaku *GoogleApiKeyUpdate) Save(ctx context.Context) (int, error) {
	return withHooks[int, GoogleApiKeyMutation](ctx, gaku.sqlSave, gaku.mutation, gaku.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (gaku *GoogleApiKeyUpdate) SaveX(ctx context.Context) int {
	affected, err := gaku.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (gaku *GoogleApiKeyUpdate) Exec(ctx context.Context) error {
	_, err := gaku.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (gaku *GoogleApiKeyUpdate) ExecX(ctx context.Context) {
	if err := gaku.Exec(ctx); err != nil {
		panic(err)
	}
}

func (gaku *GoogleApiKeyUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(googleapikey.Table, googleapikey.Columns, sqlgraph.NewFieldSpec(googleapikey.FieldID, field.TypeString))
	if ps := gaku.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := gaku.mutation.AccessToken(); ok {
		_spec.SetField(googleapikey.FieldAccessToken, field.TypeString, value)
	}
	if value, ok := gaku.mutation.RefreshToken(); ok {
		_spec.SetField(googleapikey.FieldRefreshToken, field.TypeString, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, gaku.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{googleapikey.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	gaku.mutation.done = true
	return n, nil
}

// GoogleApiKeyUpdateOne is the builder for updating a single GoogleApiKey entity.
type GoogleApiKeyUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *GoogleApiKeyMutation
}

// SetAccessToken sets the "access_token" field.
func (gakuo *GoogleApiKeyUpdateOne) SetAccessToken(s string) *GoogleApiKeyUpdateOne {
	gakuo.mutation.SetAccessToken(s)
	return gakuo
}

// SetRefreshToken sets the "refresh_token" field.
func (gakuo *GoogleApiKeyUpdateOne) SetRefreshToken(s string) *GoogleApiKeyUpdateOne {
	gakuo.mutation.SetRefreshToken(s)
	return gakuo
}

// Mutation returns the GoogleApiKeyMutation object of the builder.
func (gakuo *GoogleApiKeyUpdateOne) Mutation() *GoogleApiKeyMutation {
	return gakuo.mutation
}

// Where appends a list predicates to the GoogleApiKeyUpdate builder.
func (gakuo *GoogleApiKeyUpdateOne) Where(ps ...predicate.GoogleApiKey) *GoogleApiKeyUpdateOne {
	gakuo.mutation.Where(ps...)
	return gakuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (gakuo *GoogleApiKeyUpdateOne) Select(field string, fields ...string) *GoogleApiKeyUpdateOne {
	gakuo.fields = append([]string{field}, fields...)
	return gakuo
}

// Save executes the query and returns the updated GoogleApiKey entity.
func (gakuo *GoogleApiKeyUpdateOne) Save(ctx context.Context) (*GoogleApiKey, error) {
	return withHooks[*GoogleApiKey, GoogleApiKeyMutation](ctx, gakuo.sqlSave, gakuo.mutation, gakuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (gakuo *GoogleApiKeyUpdateOne) SaveX(ctx context.Context) *GoogleApiKey {
	node, err := gakuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (gakuo *GoogleApiKeyUpdateOne) Exec(ctx context.Context) error {
	_, err := gakuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (gakuo *GoogleApiKeyUpdateOne) ExecX(ctx context.Context) {
	if err := gakuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (gakuo *GoogleApiKeyUpdateOne) sqlSave(ctx context.Context) (_node *GoogleApiKey, err error) {
	_spec := sqlgraph.NewUpdateSpec(googleapikey.Table, googleapikey.Columns, sqlgraph.NewFieldSpec(googleapikey.FieldID, field.TypeString))
	id, ok := gakuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "GoogleApiKey.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := gakuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, googleapikey.FieldID)
		for _, f := range fields {
			if !googleapikey.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != googleapikey.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := gakuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := gakuo.mutation.AccessToken(); ok {
		_spec.SetField(googleapikey.FieldAccessToken, field.TypeString, value)
	}
	if value, ok := gakuo.mutation.RefreshToken(); ok {
		_spec.SetField(googleapikey.FieldRefreshToken, field.TypeString, value)
	}
	_node = &GoogleApiKey{config: gakuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, gakuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{googleapikey.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	gakuo.mutation.done = true
	return _node, nil
}

// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/bear-san/googlechat-sender/backend/ent/predicate"
	"github.com/bear-san/googlechat-sender/backend/ent/systemuser"
)

// SystemUserUpdate is the builder for updating SystemUser entities.
type SystemUserUpdate struct {
	config
	hooks    []Hook
	mutation *SystemUserMutation
}

// Where appends a list predicates to the SystemUserUpdate builder.
func (suu *SystemUserUpdate) Where(ps ...predicate.SystemUser) *SystemUserUpdate {
	suu.mutation.Where(ps...)
	return suu
}

// SetEmail sets the "email" field.
func (suu *SystemUserUpdate) SetEmail(s string) *SystemUserUpdate {
	suu.mutation.SetEmail(s)
	return suu
}

// SetName sets the "name" field.
func (suu *SystemUserUpdate) SetName(s string) *SystemUserUpdate {
	suu.mutation.SetName(s)
	return suu
}

// Mutation returns the SystemUserMutation object of the builder.
func (suu *SystemUserUpdate) Mutation() *SystemUserMutation {
	return suu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (suu *SystemUserUpdate) Save(ctx context.Context) (int, error) {
	return withHooks[int, SystemUserMutation](ctx, suu.sqlSave, suu.mutation, suu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (suu *SystemUserUpdate) SaveX(ctx context.Context) int {
	affected, err := suu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (suu *SystemUserUpdate) Exec(ctx context.Context) error {
	_, err := suu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (suu *SystemUserUpdate) ExecX(ctx context.Context) {
	if err := suu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (suu *SystemUserUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(systemuser.Table, systemuser.Columns, sqlgraph.NewFieldSpec(systemuser.FieldID, field.TypeString))
	if ps := suu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := suu.mutation.Email(); ok {
		_spec.SetField(systemuser.FieldEmail, field.TypeString, value)
	}
	if value, ok := suu.mutation.Name(); ok {
		_spec.SetField(systemuser.FieldName, field.TypeString, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, suu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{systemuser.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	suu.mutation.done = true
	return n, nil
}

// SystemUserUpdateOne is the builder for updating a single SystemUser entity.
type SystemUserUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *SystemUserMutation
}

// SetEmail sets the "email" field.
func (suuo *SystemUserUpdateOne) SetEmail(s string) *SystemUserUpdateOne {
	suuo.mutation.SetEmail(s)
	return suuo
}

// SetName sets the "name" field.
func (suuo *SystemUserUpdateOne) SetName(s string) *SystemUserUpdateOne {
	suuo.mutation.SetName(s)
	return suuo
}

// Mutation returns the SystemUserMutation object of the builder.
func (suuo *SystemUserUpdateOne) Mutation() *SystemUserMutation {
	return suuo.mutation
}

// Where appends a list predicates to the SystemUserUpdate builder.
func (suuo *SystemUserUpdateOne) Where(ps ...predicate.SystemUser) *SystemUserUpdateOne {
	suuo.mutation.Where(ps...)
	return suuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (suuo *SystemUserUpdateOne) Select(field string, fields ...string) *SystemUserUpdateOne {
	suuo.fields = append([]string{field}, fields...)
	return suuo
}

// Save executes the query and returns the updated SystemUser entity.
func (suuo *SystemUserUpdateOne) Save(ctx context.Context) (*SystemUser, error) {
	return withHooks[*SystemUser, SystemUserMutation](ctx, suuo.sqlSave, suuo.mutation, suuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (suuo *SystemUserUpdateOne) SaveX(ctx context.Context) *SystemUser {
	node, err := suuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (suuo *SystemUserUpdateOne) Exec(ctx context.Context) error {
	_, err := suuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (suuo *SystemUserUpdateOne) ExecX(ctx context.Context) {
	if err := suuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (suuo *SystemUserUpdateOne) sqlSave(ctx context.Context) (_node *SystemUser, err error) {
	_spec := sqlgraph.NewUpdateSpec(systemuser.Table, systemuser.Columns, sqlgraph.NewFieldSpec(systemuser.FieldID, field.TypeString))
	id, ok := suuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "SystemUser.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := suuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, systemuser.FieldID)
		for _, f := range fields {
			if !systemuser.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != systemuser.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := suuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := suuo.mutation.Email(); ok {
		_spec.SetField(systemuser.FieldEmail, field.TypeString, value)
	}
	if value, ok := suuo.mutation.Name(); ok {
		_spec.SetField(systemuser.FieldName, field.TypeString, value)
	}
	_node = &SystemUser{config: suuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, suuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{systemuser.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	suuo.mutation.done = true
	return _node, nil
}

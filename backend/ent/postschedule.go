// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/bear-san/googlechat-sender/backend/ent/postschedule"
	"github.com/google/uuid"
)

// PostSchedule is the model entity for the PostSchedule schema.
type PostSchedule struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// UID holds the value of the "uid" field.
	UID string `json:"uid,omitempty"`
	// Target holds the value of the "target" field.
	Target string `json:"target,omitempty"`
	// DisplayName holds the value of the "displayName" field.
	DisplayName string `json:"displayName,omitempty"`
	// Text holds the value of the "text" field.
	Text string `json:"text,omitempty"`
	// IsSent holds the value of the "is_sent" field.
	IsSent bool `json:"is_sent,omitempty"`
	// SendAt holds the value of the "send_at" field.
	SendAt       time.Time `json:"send_at,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*PostSchedule) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case postschedule.FieldIsSent:
			values[i] = new(sql.NullBool)
		case postschedule.FieldUID, postschedule.FieldTarget, postschedule.FieldDisplayName, postschedule.FieldText:
			values[i] = new(sql.NullString)
		case postschedule.FieldSendAt:
			values[i] = new(sql.NullTime)
		case postschedule.FieldID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the PostSchedule fields.
func (ps *PostSchedule) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case postschedule.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				ps.ID = *value
			}
		case postschedule.FieldUID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field uid", values[i])
			} else if value.Valid {
				ps.UID = value.String
			}
		case postschedule.FieldTarget:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field target", values[i])
			} else if value.Valid {
				ps.Target = value.String
			}
		case postschedule.FieldDisplayName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field displayName", values[i])
			} else if value.Valid {
				ps.DisplayName = value.String
			}
		case postschedule.FieldText:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field text", values[i])
			} else if value.Valid {
				ps.Text = value.String
			}
		case postschedule.FieldIsSent:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_sent", values[i])
			} else if value.Valid {
				ps.IsSent = value.Bool
			}
		case postschedule.FieldSendAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field send_at", values[i])
			} else if value.Valid {
				ps.SendAt = value.Time
			}
		default:
			ps.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the PostSchedule.
// This includes values selected through modifiers, order, etc.
func (ps *PostSchedule) Value(name string) (ent.Value, error) {
	return ps.selectValues.Get(name)
}

// Update returns a builder for updating this PostSchedule.
// Note that you need to call PostSchedule.Unwrap() before calling this method if this PostSchedule
// was returned from a transaction, and the transaction was committed or rolled back.
func (ps *PostSchedule) Update() *PostScheduleUpdateOne {
	return NewPostScheduleClient(ps.config).UpdateOne(ps)
}

// Unwrap unwraps the PostSchedule entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ps *PostSchedule) Unwrap() *PostSchedule {
	_tx, ok := ps.config.driver.(*txDriver)
	if !ok {
		panic("ent: PostSchedule is not a transactional entity")
	}
	ps.config.driver = _tx.drv
	return ps
}

// String implements the fmt.Stringer.
func (ps *PostSchedule) String() string {
	var builder strings.Builder
	builder.WriteString("PostSchedule(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ps.ID))
	builder.WriteString("uid=")
	builder.WriteString(ps.UID)
	builder.WriteString(", ")
	builder.WriteString("target=")
	builder.WriteString(ps.Target)
	builder.WriteString(", ")
	builder.WriteString("displayName=")
	builder.WriteString(ps.DisplayName)
	builder.WriteString(", ")
	builder.WriteString("text=")
	builder.WriteString(ps.Text)
	builder.WriteString(", ")
	builder.WriteString("is_sent=")
	builder.WriteString(fmt.Sprintf("%v", ps.IsSent))
	builder.WriteString(", ")
	builder.WriteString("send_at=")
	builder.WriteString(ps.SendAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// PostSchedules is a parsable slice of PostSchedule.
type PostSchedules []*PostSchedule

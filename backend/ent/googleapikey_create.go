// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/bear-san/googlechat-sender/backend/ent/googleapikey"
)

// GoogleApiKeyCreate is the builder for creating a GoogleApiKey entity.
type GoogleApiKeyCreate struct {
	config
	mutation *GoogleApiKeyMutation
	hooks    []Hook
}

// SetAccessToken sets the "access_token" field.
func (gakc *GoogleApiKeyCreate) SetAccessToken(s string) *GoogleApiKeyCreate {
	gakc.mutation.SetAccessToken(s)
	return gakc
}

// SetRefreshToken sets the "refresh_token" field.
func (gakc *GoogleApiKeyCreate) SetRefreshToken(s string) *GoogleApiKeyCreate {
	gakc.mutation.SetRefreshToken(s)
	return gakc
}

// SetID sets the "id" field.
func (gakc *GoogleApiKeyCreate) SetID(s string) *GoogleApiKeyCreate {
	gakc.mutation.SetID(s)
	return gakc
}

// Mutation returns the GoogleApiKeyMutation object of the builder.
func (gakc *GoogleApiKeyCreate) Mutation() *GoogleApiKeyMutation {
	return gakc.mutation
}

// Save creates the GoogleApiKey in the database.
func (gakc *GoogleApiKeyCreate) Save(ctx context.Context) (*GoogleApiKey, error) {
	return withHooks[*GoogleApiKey, GoogleApiKeyMutation](ctx, gakc.sqlSave, gakc.mutation, gakc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (gakc *GoogleApiKeyCreate) SaveX(ctx context.Context) *GoogleApiKey {
	v, err := gakc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (gakc *GoogleApiKeyCreate) Exec(ctx context.Context) error {
	_, err := gakc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (gakc *GoogleApiKeyCreate) ExecX(ctx context.Context) {
	if err := gakc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (gakc *GoogleApiKeyCreate) check() error {
	if _, ok := gakc.mutation.AccessToken(); !ok {
		return &ValidationError{Name: "access_token", err: errors.New(`ent: missing required field "GoogleApiKey.access_token"`)}
	}
	if _, ok := gakc.mutation.RefreshToken(); !ok {
		return &ValidationError{Name: "refresh_token", err: errors.New(`ent: missing required field "GoogleApiKey.refresh_token"`)}
	}
	return nil
}

func (gakc *GoogleApiKeyCreate) sqlSave(ctx context.Context) (*GoogleApiKey, error) {
	if err := gakc.check(); err != nil {
		return nil, err
	}
	_node, _spec := gakc.createSpec()
	if err := sqlgraph.CreateNode(ctx, gakc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected GoogleApiKey.ID type: %T", _spec.ID.Value)
		}
	}
	gakc.mutation.id = &_node.ID
	gakc.mutation.done = true
	return _node, nil
}

func (gakc *GoogleApiKeyCreate) createSpec() (*GoogleApiKey, *sqlgraph.CreateSpec) {
	var (
		_node = &GoogleApiKey{config: gakc.config}
		_spec = sqlgraph.NewCreateSpec(googleapikey.Table, sqlgraph.NewFieldSpec(googleapikey.FieldID, field.TypeString))
	)
	if id, ok := gakc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := gakc.mutation.AccessToken(); ok {
		_spec.SetField(googleapikey.FieldAccessToken, field.TypeString, value)
		_node.AccessToken = value
	}
	if value, ok := gakc.mutation.RefreshToken(); ok {
		_spec.SetField(googleapikey.FieldRefreshToken, field.TypeString, value)
		_node.RefreshToken = value
	}
	return _node, _spec
}

// GoogleApiKeyCreateBulk is the builder for creating many GoogleApiKey entities in bulk.
type GoogleApiKeyCreateBulk struct {
	config
	builders []*GoogleApiKeyCreate
}

// Save creates the GoogleApiKey entities in the database.
func (gakcb *GoogleApiKeyCreateBulk) Save(ctx context.Context) ([]*GoogleApiKey, error) {
	specs := make([]*sqlgraph.CreateSpec, len(gakcb.builders))
	nodes := make([]*GoogleApiKey, len(gakcb.builders))
	mutators := make([]Mutator, len(gakcb.builders))
	for i := range gakcb.builders {
		func(i int, root context.Context) {
			builder := gakcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*GoogleApiKeyMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, gakcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, gakcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, gakcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (gakcb *GoogleApiKeyCreateBulk) SaveX(ctx context.Context) []*GoogleApiKey {
	v, err := gakcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (gakcb *GoogleApiKeyCreateBulk) Exec(ctx context.Context) error {
	_, err := gakcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (gakcb *GoogleApiKeyCreateBulk) ExecX(ctx context.Context) {
	if err := gakcb.Exec(ctx); err != nil {
		panic(err)
	}
}
